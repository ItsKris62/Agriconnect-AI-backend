generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  password            String
  firstName           String
  lastName            String
  phoneNumber         String?
  role                UserRole             @default(FARMER)
  country             Country
  county              String?
  subCounty           String?
  latitude            Float?
  longitude           Float?
  idNumber            String?
  idImageUrl          String?
  verificationStatus  VerificationStatus   @default(NOT_VERIFIED)
  avatarUrl           String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  averageRating       Float?
  events              Event[]
  feedback            Feedback[]
  receivedMessages    Message[]            @relation("ReceivedMessages")
  sentMessages        Message[]            @relation("SentMessages")
  orders              Order[]
  passwordResetTokens PasswordResetToken[]
  posts               Post[]
  products            Product[]
  ratingsReceived     Rating[]             @relation("RatingsReceived")
  ratingsGiven        Rating[]             @relation("RatingsGiven")

  @@index([email], map: "user_email_idx")
}

model Product {
  id             Int      @id @default(autoincrement())
  userId         Int
  name           String
  quantity       Float
  price          Float
  imageUrls      String[]
  qualityScore   Float?
  predictedPrice Float?
  latitude       Float?
  longitude      Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  events         Event[]
  orders         Order[]
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId, createdAt], map: "product_user_created_idx")
}

model Order {
  id         Int      @id @default(autoincrement())
  buyerId    Int
  productId  Int
  quantity   Float
  totalPrice Float
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  events     Event[]
  buyer      User     @relation(fields: [buyerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  createdAt  DateTime @default(now())
  events     Event[]
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
}

model Post {
  id        Int      @id @default(autoincrement())
  userId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
  user      User     @relation(fields: [userId], references: [id])
}

model Resource {
  id        Int      @id @default(autoincrement())
  title     String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
}

model Event {
  id         Int       @id @default(autoincrement())
  userId     Int?
  action     String
  entityType String?
  entityId   Int?
  details    Json?
  createdAt  DateTime  @default(now())
  user       User?     @relation(fields: [userId], references: [id])
  message    Message?  @relation(fields: [entityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "event_message_fkey")
  order      Order?    @relation(fields: [entityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "event_order_fkey")
  post       Post?     @relation(fields: [entityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "event_post_fkey")
  product    Product?  @relation(fields: [entityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "event_product_fkey")
  resource   Resource? @relation(fields: [entityId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "event_resource_fkey")

  @@index([createdAt], map: "event_created_idx")
}

model Rating {
  id             Int      @id @default(autoincrement())
  raterId        Int
  farmerId       Int
  productQuality Int
  responseTime   Int
  communication  Int
  friendliness   Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  farmer         User     @relation("RatingsReceived", fields: [farmerId], references: [id])
  rater          User     @relation("RatingsGiven", fields: [raterId], references: [id])

  @@index([farmerId, createdAt], map: "rating_farmer_created_idx")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Feedback {
  id        Int      @id @default(autoincrement())
  userId    Int?
  name      String?
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

enum UserRole {
  FARMER
  BUYER
  ADMIN
}

enum Country {
  KENYA
  UGANDA
  TANZANIA
}

enum VerificationStatus {
  NOT_VERIFIED
  VERIFIED
}
